{"version":3,"file":"static/iframe.992f4cd12b3aa257bda5.bundle.js","sources":["webpack:///./src/TextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport MuiTextField, {\n  TextFieldProps as MuiTextFieldProps,\n} from '@material-ui/core/TextField';\nimport { FieldProps, getIn } from 'formik';\nimport { Omit } from './types';\n\nexport interface TextFieldProps\n  extends FieldProps,\n    Omit<MuiTextFieldProps, 'error' | 'name' | 'onChange' | 'value'> {}\n\nexport const fieldToTextField = ({\n  field,\n  form,\n  variant,\n  disabled = false,\n  ...props\n}: TextFieldProps): MuiTextFieldProps => {\n  const { name } = field;\n  const { touched, errors, isSubmitting } = form;\n\n  const fieldError = getIn(errors, name);\n  const showError = getIn(touched, name) && !!fieldError;\n\n  return {\n    ...props,\n    ...field,\n    // Hack to work around type issue\n    // See: https://github.com/Microsoft/TypeScript/issues/28791\n    variant: variant as any,\n    error: showError,\n    helperText: showError ? fieldError : props.helperText,\n    disabled: isSubmitting || disabled,\n  };\n};\n\nexport const TextField: React.ComponentType<TextFieldProps> = ({\n  children,\n  ...props\n}: TextFieldProps) => (\n  <MuiTextField {...fieldToTextField(props)} children={children} />\n);\n\nTextField.displayName = 'FormikMaterialUITextField';\n"],"mappings":"AAoCA","sourceRoot":""}